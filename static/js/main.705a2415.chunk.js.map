{"version":3,"sources":["views/StartView.js","components/DescriptionLine.js","views/SearchView.js","views/CityView.js","components/CityButton.js","views/CountryView.js","App.js","serviceWorker.js","index.js"],"names":["StartView","className","to","pathname","state","searchType","type","DescriptionLine","text","toUpperCase","window","city","SearchView","props","location","history","useHistory","useState","error","setError","handleSearch","console","log","searchWord","document","querySelector","value","query","process","getCityQueryString","fetch","then","result","json","geonames","length","population","push","geonameId","citySearch","getCountryQueryString","data","totalResultsCount","country","name","countryCode","countrySearch","id","placeholder","onKeyDown","e","key","onClick","CityView","loading","setLoading","setPopulation","cityName","setCityName","getUrlCity","a","urlQuery","search","params","URLSearchParams","cityId","get","getCityName","geoId","fcl","useEffect","toString","replace","CityButton","CountryView","countryName","setCountryName","cities","setCities","getUrlCountry","getCitiesFromCountryCode","cityList","getItemByGeoId","getCitiesFromGeoId","countryId","countryData","map","NotFound","App","exact","path","render","default","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.705a2415.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst StartView = () => {\r\n  return (\r\n    <div className=\"button-container\">\r\n      <Link to={{ pathname: \"/search\", state: { searchType: \"city\" } }}>\r\n        <button type=\"button\" className=\"start-button bordered-button\">\r\n          SEARCH BY CITY\r\n        </button>\r\n      </Link>\r\n      <Link to={{ pathname: \"/search\", state: { searchType: \"country\" } }}>\r\n        <button type=\"button\" className=\"start-button bordered-button\">\r\n          SEARCH BY COUNTRY\r\n        </button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartView;\r\n","import React from \"react\";\r\n\r\nconst DescriptionLine = ({ text }) => {\r\n    return <div className=\"description\">{`${text.toUpperCase()}`}</div>\r\n}\r\n\r\nexport default DescriptionLine;","import React, { useState } from \"react\";\r\nimport \"../css/searchView.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport DescriptionLine from \"../components/DescriptionLine\";\r\n\r\nwindow.city = \"textCity\"\r\nconst SearchView = (props) => {\r\n  const { searchType } = props.location.state;\r\n  const history = useHistory();\r\n  const [error, setError] = useState(\"\");\r\n  const corsRedirect = process.env.REACT_APP_CORS_REDIRECT;\r\n  const geonamesUsername = process.env.REACT_APP_GEONAMES_USERNAME;\r\n\r\n  const getCityQueryString = (searchWord) => {\r\n    // cors-redirect\r\n    let query = corsRedirect + `http://api.geonames.org/searchJSON?name_equals=${searchWord}&featureClass=P&city=cities15000&maxRows=1&username=${geonamesUsername}`\r\n    return query;\r\n  }\r\n\r\n  const getCountryQueryString = (searchWord) => {\r\n    let query = corsRedirect + `http://api.geonames.org/searchJSON?name_equals=${searchWord}&featureCode=PCLI&maxRows=1&username=${geonamesUsername}`;\r\n    return query;\r\n  }\r\n\r\n  const citySearch = (searchWord) => {\r\n    let query = getCityQueryString(searchWord);\r\n    fetch(query)\r\n      .then((result) => result.json())\r\n      .then((result) => {\r\n        // Check if we got result\r\n        if (result.geonames.length > 0) {\r\n          let city = result.geonames[0];\r\n          // Skip very small cities\r\n          let populationLimit = 1500\r\n          if (city.population < populationLimit) {\r\n            setError(`Could not find city: ${searchWord}`)\r\n          }\r\n          else {// Success! Navigate to city view\r\n            setError(\"\");\r\n            history.push(`/cityPop?city=${city.geonameId}`)\r\n          }\r\n        } else { // no city found\r\n          setError(`Could not find city: ${searchWord}`)\r\n        }\r\n      });\r\n  };\r\n\r\n  const countrySearch = (searchWord) => {\r\n    let query = getCountryQueryString(searchWord);\r\n    fetch(query)\r\n      .then((result) => result.json())\r\n      .then((data) => {\r\n        // Check if we got result\r\n        console.log(data);\r\n        if (data.totalResultsCount > 0) {\r\n          let country = data.geonames[0]\r\n          console.log(country.name, country.countryCode, country.geonameId);\r\n          // Go to country view\r\n          history.push(`/country?country=${country.geonameId}`);\r\n        } else { // Error getting the country\r\n          setError(`No country found, ${searchWord}`)\r\n        }\r\n      })\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    console.log(\"handleSearch\");\r\n    let searchWord = document.querySelector(\"#search-field\").value;\r\n    if (searchType === \"city\") {\r\n      citySearch(searchWord);\r\n    } else if (searchType === \"country\") {\r\n      countrySearch(searchWord);\r\n    } else {\r\n      console.log(`[handleSearch]: Unknown search type '${searchType}'`);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleSearch();\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"search-container\">\r\n      <DescriptionLine text={`Search by ${searchType}`} />\r\n      <input\r\n        type=\"text\"\r\n        name=\"search-field\"\r\n        id=\"search-field\"\r\n        placeholder={`Enter a ${searchType}`}\r\n        onKeyDown={handleKeyDown}\r\n      ></input>\r\n      {error ? <div id=\"error-box\">{error}</div> : null}\r\n      <button type=\"button\" id=\"search-button\" onClick={handleSearch}>\r\n        <i className=\"fas fa-search\"></i>\r\n      </button>\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default SearchView;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport DescriptionLine from \"../components/DescriptionLine\";\r\nimport \"../css/searchView.css\";\r\n\r\nconst CityView = (props) => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    const [population, setPopulation] = useState(\"\");\r\n    const [cityName, setCityName] = useState(\"\");\r\n\r\n    const getUrlCity = async () => {\r\n        let urlQuery = window.location.search;\r\n        let params = new URLSearchParams(urlQuery);\r\n        let cityId = params.get(\"city\");\r\n        console.log(\"Got city:\", cityId);\r\n        return cityId\r\n    }\r\n\r\n    const getCityName = async () => {\r\n        let geoId = await getUrlCity()\r\n        console.log(\"geoId\", geoId)\r\n\r\n        let query = `http://api.geonames.org/getJSON?geonameId=${geoId}&username=ytterdorr&style=short`;\r\n        fetch(query)\r\n            .then((result) => result.json())\r\n            .then((data) => {\r\n                // Check if we got result\r\n                console.log(\"data\", data);\r\n                if (data.fcl === \"P\") { // Got a city\r\n                    // Get population\r\n                    let city = data;\r\n                    console.log(`pop (${city.name}): ${city.population}`)\r\n                    setCityName(city.name);\r\n                    setPopulation(city.population)\r\n                    setLoading(false);\r\n                } else { // Error getting the city\r\n                    setError(`No city found`)\r\n                }\r\n            });\r\n    }\r\n\r\n    const numberWithSpaces = (number) => {\r\n        return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n\r\n        getCityName();\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"centered-column\">\r\n\r\n            { loading ? <DescriptionLine text=\"Loading...\" /> :\r\n                <>\r\n                    <DescriptionLine text={cityName} />\r\n                    <div className=\"population-display\">\r\n                        <p className=\"small-text\">Population</p>\r\n                        <p className=\"population-number\">{numberWithSpaces(population)}</p>\r\n                    </div>\r\n                </>\r\n            }\r\n            { error ? <p className=\"error\">{error}</p> : null}\r\n        </div>)\r\n}\r\n\r\nexport default CityView;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst CityButton = ({ name, id }) => {\r\n    return <Link to={`/cityPop?city=${id}`} >\r\n        <button type=\"button\" className=\"city-button bordered-button\">\r\n            {name}\r\n        </button>\r\n    </Link>\r\n}\r\n\r\nexport default CityButton;","import React, { useEffect, useState } from \"react\";\r\nimport CityButton from \"../components/CityButton\";\r\nimport DescriptionLine from \"../components/DescriptionLine\";\r\n\r\nconst CountryView = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    const [countryName, setCountryName] = useState(\"\");\r\n    const [cities, setCities] = useState([]);\r\n\r\n\r\n    const getUrlCountry = () => {\r\n        let urlQuery = window.location.search;\r\n        let params = new URLSearchParams(urlQuery);\r\n        let countryId = params.get(\"country\");\r\n        return countryId\r\n    }\r\n\r\n    const getCitiesFromCountryCode = async (countryCode) => {\r\n        let query = `http://api.geonames.org/searchJSON?country=${countryCode}&featureClass=P&city=cities15000&maxRows=3&username=ytterdorr`;\r\n        let cityList = [];\r\n        await fetch(query)\r\n            .then((result) => result.json())\r\n            .then((data) => {\r\n                // Check if we got result\r\n                if (data.geonames.length > 0) {\r\n                    cityList = data.geonames;\r\n                } else { // Error getting the city\r\n                    setError(`No cities found, ${countryCode}`)\r\n                }\r\n            })\r\n        return cityList\r\n    }\r\n\r\n    const getItemByGeoId = async (geoId) => {\r\n        let query = `http://api.geonames.org/getJSON?geonameId=${geoId}&username=ytterdorr&style=short`;\r\n        let data;\r\n        await fetch(query)\r\n            .then((result) => result.json())\r\n            .then((result) => { data = result });\r\n        return data;\r\n    }\r\n\r\n    const getCitiesFromGeoId = async () => {\r\n        let countryId = getUrlCountry();\r\n        let countryData = await getItemByGeoId(countryId);\r\n        let cityList = await getCitiesFromCountryCode(countryData.countryCode);\r\n        setCountryName(countryData.name);\r\n        setCities(cityList);\r\n        setLoading(false);\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCitiesFromGeoId();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className=\"centered-column\">\r\n            { loading ? <DescriptionLine text=\"Loading...\" /> :\r\n                <>\r\n                    <DescriptionLine text={countryName} />\r\n                    <div className=\"citylist-container centered-column\">\r\n                        {cities.map(city => {\r\n                            return <CityButton name={city.name} id={city.geonameId} key={city.geonameId} />\r\n                        })}\r\n                    </div>\r\n                </>\r\n            }\r\n            { error ? <p className=\"error\">{error}</p> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryView;","import React, { useEffect } from \"react\";\r\n// import { Router } from \"@reach/router\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport StartView from \"./views/StartView\";\r\nimport SearchView from \"./views/SearchView\";\r\nimport CityView from \"./views/CityView\";\r\nimport CountryView from \"./views/CountryView\";\r\n\r\nimport \"./css/reset.css\";\r\nimport \"./css/main.css\";\r\n\r\nconst NotFound = () => {\r\n  return <div>Sorry, nothing here</div>;\r\n};\r\n\r\nconst forceHttp = () => {\r\n  console.log(\"[Force http]\")\r\n  let loc = window.location.href;\r\n  if (loc[4] == \"s\") {\r\n    window.location.href = loc.substring(0, 4) + loc.substring(5)\r\n  }\r\n}\r\n\r\nfunction App() {\r\n\r\n  // Force http over https for api to work\r\n  // useEffect(() => {\r\n  //   forceHttp();\r\n  // })\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <header className=\"App-header\">\r\n        <h1>CityPop</h1>\r\n      </header>\r\n      <main>\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <StartView />\r\n            </Route>\r\n            <Route\r\n              path=\"/search\"\r\n              render={(props) => <SearchView {...props}></SearchView>}\r\n            ></Route>\r\n            <Route path=\"/cityPop\">\r\n              <CityView />\r\n            </Route>\r\n            <Route path=\"/country\">\r\n              <CountryView />\r\n            </Route>\r\n\r\n            <NotFound default></NotFound>\r\n          </Switch>\r\n        </Router>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}